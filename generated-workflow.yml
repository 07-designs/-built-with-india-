name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install Dependencies
        run: |
          npm ci
          npm run lint
          npm run format:check

  build-application:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Build Application
        run: |
          npm run build
          npm run generate-types

  unit-tests:
    runs-on: ubuntu-latest
    needs: build-application
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Unit Tests
        run: |
          npm run test:unit
          npm run test:coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: build-application
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: my_db
      redis:
        image: redis:latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Integration Tests
        run: |
          docker-compose up -d db redis
          npm run test:integration
          docker-compose down

  build-docker-image:
    runs-on: ubuntu-latest
    needs: unit-tests, integration-tests
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker Image
        run: |
          docker build -t my-microservice-app:${GITHUB_SHA} .
          docker tag my-microservice-app:${GITHUB_SHA} my-microservice-app:latest
          docker login -u ${{ secrets.AWS_ECR_LOGIN }} -p ${{ secrets.AWS_ECR_PASSWORD }} ${{ secrets.AWS_ECR_REGISTRY }}
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/my-microservice-app:${GITHUB_SHA}
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/my-microservice-app:latest


  e2e-tests:
    runs-on: ubuntu-latest
    needs: build-docker-image
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: my_db
      redis:
        image: redis:latest
      mongodb:
        image: mongo:latest
    steps:
      - uses: actions/checkout@v3
      - name: E2E Tests
        run: |
          docker-compose up -d
          npm run test:e2e
          docker-compose down

  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: e2e-tests
    environment: staging
    steps:
      - name: Deploy to Staging
        run: echo "Deploying to staging..."

  smoke-tests:
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    environment: staging
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Smoke Tests
        run: npm run test:smoke -- --env=staging

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: smoke-tests
    environment: production
    steps:
      - name: Deploy to Production
        run: echo "Deploying to production..."

